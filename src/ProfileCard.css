/* :root values are component-specific defaults or dynamic variables from JS */
.pc-card-wrapper {
  --pointer-x: 50%;
  --pointer-y: 50%;
  --pointer-from-center: 0;
  --pointer-from-top: 0.5;
  --pointer-from-left: 0.5;
  --card-opacity: 0; /* Controlled by hover/active */
  --rotate-x: 0deg;
  --rotate-y: 0deg;
  --background-x: 50%;
  --background-y: 50%;
  /* --grain, --icon, --behind-gradient, --inner-gradient are passed as props or use defaults */

  /* Sunpillar colors are part of the design, could be themed if a light variant is designed */
  --sunpillar-1: hsl(2, 100%, 73%);
  --sunpillar-2: hsl(53, 100%, 69%);
  --sunpillar-3: hsl(93, 100%, 69%);
  --sunpillar-4: hsl(176, 100%, 76%);
  --sunpillar-5: hsl(228, 100%, 74%);
  --sunpillar-6: hsl(283, 100%, 73%);
  --sunpillar-clr-1: var(--sunpillar-1);
  --sunpillar-clr-2: var(--sunpillar-2);
  --sunpillar-clr-3: var(--sunpillar-3);
  --sunpillar-clr-4: var(--sunpillar-4);
  --sunpillar-clr-5: var(--sunpillar-5);
  --sunpillar-clr-6: var(--sunpillar-6);

  --card-radius: 30px; /* Consistent radius */

  perspective: 500px;
  transform: translate3d(0, 0, 0.1px); /* GPU layer */
  position: relative;
  touch-action: none; /* Prevent scrolling during card interaction */
}

.pc-card-wrapper::before {
  content: '';
  position: absolute;
  inset: -10px; /* Glow area outside card */
  background: inherit; /* Inherit from .pc-card-wrapper style prop if set */
  background-position: inherit;
  border-radius: inherit;
  transition: all 0.5s ease;
  filter: contrast(2) saturate(2) blur(36px);
  transform: scale(0.8) translate3d(0, 0, 0.1px);
  background-size: 100% 100%;
  background-image: var(--behind-gradient); /* Prop or default gradient */
  opacity: var(--card-opacity); /* Tied to hover/active state of wrapper */
}

.pc-card-wrapper:hover,
.pc-card-wrapper.active {
  --card-opacity: 1; /* Show glow */
}

.pc-card-wrapper:hover::before,
.pc-card-wrapper.active::before {
  filter: contrast(1) saturate(2) blur(40px); /* Adjusted glow */
  transform: scale(0.9) translate3d(0, 0, 0.1px);
}

.pc-card {
  height: 80svh;
  max-height: 540px;
  display: grid;
  aspect-ratio: 0.718;
  border-radius: var(--card-radius);
  position: relative;
  background-blend-mode: color-dodge, normal, normal, normal; /* Complex blending, keep as is */
  animation: glow-bg 12s linear infinite; /* Keep animation */

  /* Themed shadow: use --shadow-color for the color part */
  box-shadow: var(--shadow-color, rgba(0,0,0,0.8)) /* Fallback if --shadow-color not defined */
              calc((var(--pointer-from-left) * 10px) - 3px)
              calc((var(--pointer-from-top) * 20px) - 6px)
              20px -5px;

  transition: transform 1s ease;
  transform: translate3d(0, 0, 0.1px) rotateX(0deg) rotateY(0deg);
  background-size: 100% 100%;
  background-position: 0 0, 0 0, 50% 50%, 0 0;
  background-image: none; /* Base background image, specific layers add more */

  background-color: var(--card-bg); /* Themed card background */
  backdrop-filter: blur(18px) saturate(180%); /* Glassmorphism */
  -webkit-backdrop-filter: blur(18px) saturate(180%);
  color: var(--text-color); /* Ensure text inside card is themed */
}

[data-theme="light"] .pc-card {
  backdrop-filter: blur(20px) saturate(150%); /* Slightly different blur for light */
  -webkit-backdrop-filter: blur(20px) saturate(150%);
  box-shadow: var(--shadow-color, rgba(0,0,0,0.2)) /* Lighter shadow for light theme */
              calc((var(--pointer-from-left) * 8px) - 4px)
              calc((var(--pointer-from-top) * 16px) - 8px)
              20px -5px;
}


.pc-card:hover,
.pc-card.active {
  transition: none; /* Disable transition during active interaction */
  transform: translate3d(0, 0, 0.1px) rotateX(var(--rotate-y)) rotateY(var(--rotate-x));
}

/* All direct children of pc-card are grid items filling the area */
.pc-card * {
  display: grid;
  grid-area: 1/-1;
  border-radius: var(--card-radius); /* Inherit border radius */
  transform: translate3d(0, 0, 0.1px); /* Promote to own layer */
  pointer-events: none; /* Children usually not interactive unless specified */
}

.pc-inside {
  inset: 1px; /* Small inset for border effect */
  position: absolute;
  background-image: var(--inner-gradient); /* Prop or default inner gradient */
  background-color: var(--card-bg); /* Themed, slightly transparent */
  opacity: 0.8; /* Make inner slightly more transparent */
  transform: translate3d(0, 0, 0.01px);
}
[data-theme="light"] .pc-inside {
   opacity: 0.9; /* Less transparency for light theme inner */
}


.pc-shine {
  mask-image: var(--icon); /* Icon mask from props */
  mask-mode: luminance;
  mask-repeat: repeat;
  mask-size: 150%;
  mask-position: top calc(200% - (var(--background-y) * 5)) left calc(100% - var(--background-x));
  transition: filter 0.6s ease;
  filter: brightness(0.66) contrast(1.33) saturate(0.33) opacity(0.5);
  animation: holo-bg 18s linear infinite; /* Keep holo animation */
  mix-blend-mode: color-dodge; /* Key for holographic effect */
}

.pc-shine,
.pc-shine::after {
  --space: 5%; /* For gradient stops */
  --angle: -45deg; /* For gradient angle */
  transform: translate3d(0, 0, 1px); /* Above content */
  overflow: hidden;
  z-index: 3; /* Shine is above most content */
  background-color: transparent; /* Base color for shine layers, mostly for blending */
  background-size: cover;
  background-position: center;
  /* Complex background image, difficult to theme without altering the effect significantly */
  background-image: repeating-linear-gradient(0deg, var(--sunpillar-clr-1) calc(var(--space) * 1), var(--sunpillar-clr-2) calc(var(--space) * 2), var(--sunpillar-clr-3) calc(var(--space) * 3), var(--sunpillar-clr-4) calc(var(--space) * 4), var(--sunpillar-clr-5) calc(var(--space) * 5), var(--sunpillar-clr-6) calc(var(--space) * 6), var(--sunpillar-clr-1) calc(var(--space) * 7)),
                    repeating-linear-gradient(var(--angle), #0e152e 0%, hsl(180, 10%, 60%) 3.8%, hsl(180, 29%, 66%) 4.5%, hsl(180, 10%, 60%) 5.2%, #0e152e 10%, #0e152e 12%),
                    radial-gradient(farthest-corner circle at var(--pointer-x) var(--pointer-y), hsla(0, 0%, 0%, 0.1) 12%, hsla(0, 0%, 0%, 0.15) 20%, hsla(0, 0%, 0%, 0.25) 120%);
  background-position: 0 var(--background-y), var(--background-x) var(--background-y), center;
  background-blend-mode: color, hard-light; /* Blending for holo effect */
  background-size: 500% 500%, 300% 300%, 200% 200%;
  background-repeat: repeat;
}
[data-theme="light"] .pc-shine {
  mix-blend-mode: luminosity; /* Different blend mode for light theme might work better */
  opacity: 0.7;
}


.pc-shine::before,
.pc-shine::after {
  content: '';
  background-position: center;
  background-size: cover;
  grid-area: 1/1;
  opacity: 0; /* Hidden by default, shown on hover/active */
}

.pc-card:hover .pc-shine,
.pc-card.active .pc-shine {
  filter: brightness(0.85) contrast(1.5) saturate(0.5);
  animation: none; /* Pause animation during interaction */
}

.pc-card:hover .pc-shine::before,
.pc-card.active .pc-shine::before,
.pc-card:hover .pc-shine::after,
.pc-card.active .pc-shine::after {
  opacity: 1; /* Show before/after layers on hover/active */
}

.pc-shine::before {
  /* Another complex gradient, hard to theme without changing the core visual */
  background-image: linear-gradient(45deg, var(--sunpillar-4), var(--sunpillar-5), var(--sunpillar-6), var(--sunpillar-1), var(--sunpillar-2), var(--sunpillar-3)),
                    radial-gradient(circle at var(--pointer-x) var(--pointer-y), hsl(0,0%,70%) 0%, hsla(0,0%,30%,0.2) 90%),
                    var(--grain); /* Grain texture from prop */
  background-size: 250% 250%, 100% 100%, 220px 220px;
  background-position: var(--pointer-x) var(--pointer-y), center, calc(var(--pointer-x) * 0.01) calc(var(--pointer-y) * 0.01);
  background-blend-mode: color-dodge;
  filter: brightness(calc(2 - var(--pointer-from-center))) contrast(calc(var(--pointer-from-center) + 2)) saturate(calc(0.5 + var(--pointer-from-center)));
  mix-blend-mode: luminosity;
}
[data-theme="light"] .pc-shine::before {
  mix-blend-mode: hard-light; /* Adjust blend for light theme */
  filter: brightness(calc(1.5 - var(--pointer-from-center))) contrast(calc(var(--pointer-from-center) + 1.5)) saturate(calc(0.7 + var(--pointer-from-center)));
}

.pc-shine::after {
  background-position: 0 var(--background-y), calc(var(--background-x) * 0.4) calc(var(--background-y) * 0.5), center;
  background-size: 200% 300%, 700% 700%, 100% 100%;
  mix-blend-mode: difference; /* Key for some holo effects */
  filter: brightness(0.8) contrast(1.5);
}
[data-theme="light"] .pc-shine::after {
  mix-blend-mode: exclusion; /* Different difference blend for light */
  filter: brightness(1) contrast(1.2);
}


.pc-glare {
  transform: translate3d(0, 0, 1.1px); /* Slightly above shine */
  overflow: hidden;
  /* Glare gradient, uses HSL values that could be adjusted based on theme accent if desired */
  background-image: radial-gradient(farthest-corner circle at var(--pointer-x) var(--pointer-y),
                                     hsla(var(--accent-hue, 248), var(--accent-sat, 25%), 80%, 0.7) 12%, /* Use accent HSL if available */
                                     hsla(var(--accent-hue, 207), var(--accent-sat, 40%), 30%, 0.5) 90%);
  mix-blend-mode: overlay; /* Overlay is good for glare */
  filter: brightness(0.8) contrast(1.2);
  z-index: 4; /* Glare is on top of shine */
}
[data-theme="light"] .pc-glare {
  background-image: radial-gradient(farthest-corner circle at var(--pointer-x) var(--pointer-y),
                                     hsla(var(--accent-hue, 248), var(--accent-sat, 25%), 60%, 0.5) 12%, /* Lighter glare for light theme */
                                     hsla(var(--accent-hue, 207), var(--accent-sat, 40%), 80%, 0.3) 90%);
  mix-blend-mode: soft-light;
  filter: brightness(1) contrast(1);
}


.pc-avatar-content {
  mix-blend-mode: screen; /* Screen blend for avatar might need review on light theme */
  overflow: hidden;
}
[data-theme="light"] .pc-avatar-content {
  mix-blend-mode: normal; /* Normal blend for avatar on light theme */
}


.pc-avatar-content .avatar {
  width: 100%;
  position: absolute;
  left: 50%;
  transform: translateX(-50%) scale(1);
  bottom: 2px;
  opacity: calc(1.75 - var(--pointer-from-center)); /* Dynamic opacity based on pointer */
}

.pc-avatar-content::before { /* Vignette mask for avatar */
  content: "";
  position: absolute;
  inset: 0;
  z-index: 1;
  mask: linear-gradient(to bottom,
      rgba(0, 0, 0, 0) 0%,
      rgba(0, 0, 0, 0) 60%,
      rgba(0, 0, 0, 1) 90%, /* Mask color doesn't matter, only alpha */
      rgba(0, 0, 0, 1) 100%);
  pointer-events: none;
}

.pc-user-info {
  position: absolute;
  bottom: 20px;
  left: 20px;
  right: 20px;
  z-index: 2; /* Above avatar vignette */
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: var(--glass-bg); /* Themed glass background */
  backdrop-filter: blur(10px) saturate(120%); /* Adjusted blur for user info */
  border: 1px solid var(--border-color); /* Themed border */
  border-radius: 15px;
  padding: 12px 14px;
  pointer-events: auto; /* User info is interactive */
  transition: background-color 0.3s ease, border-color 0.3s ease;
}
[data-theme="light"] .pc-user-info {
  backdrop-filter: blur(12px) saturate(100%);
}


.pc-user-details {
  display: flex;
  align-items: center;
  gap: 12px;
}

.pc-mini-avatar {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  overflow: hidden;
  border: 1px solid var(--border-color); /* Themed border */
  flex-shrink: 0;
  transition: border-color 0.3s ease;
}

.pc-mini-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%; /* Match parent */
}

.pc-user-text {
  display: flex;
  align-items: flex-start;
  flex-direction: column;
  gap: 6px;
}

.pc-handle {
  font-size: 14px;
  font-weight: 500;
  color: var(--text-color); /* Themed text */
  line-height: 1;
  transition: color 0.3s ease;
}

.pc-status {
  font-size: 14px;
  color: var(--text-color-muted); /* Themed muted text */
  line-height: 1;
  transition: color 0.3s ease;
}

.pc-contact-btn {
  border: 2px solid var(--accent-color); /* Accent border */
  border-radius: 8px;
  padding: 10px 20px;
  font-size: 14px;
  font-weight: 600;
  color: var(--accent-color); /* Accent text */
  background-color: transparent; /* Transparent background */
  cursor: pointer;
  transition: all 0.2s ease;
  backdrop-filter: blur(5px); /* Subtle blur on button */
  text-shadow: 0 1px 2px rgba(0,0,0,0.3); /* Softer shadow */
}
[data-theme="light"] .pc-contact-btn {
  color: var(--accent-color);
  border-color: var(--accent-color);
  text-shadow: 0 1px 2px rgba(0,0,0,0.1);
}


.pc-contact-btn:hover {
  border-color: var(--accent-color);
  background-color: var(--accent-color); /* Accent background on hover */
  color: var(--bg-color); /* Contrasting text for button on hover */
  transform: translateY(-1px);
  box-shadow: 0 4px 12px var(--shadow-color); /* Themed shadow */
}

.pc-content { /* Contains name and title */
  max-height: 100%;
  overflow: hidden;
  text-align: center;
  position: relative;
  transform: translate3d(calc(var(--pointer-from-left) * -6px + 3px), calc(var(--pointer-from-top) * -6px + 3px), 0.1px) !important;
  z-index: 5; /* Above shine and glare */
  color: var(--text-color) !important; /* Ensure text color is themed */
  mix-blend-mode: unset !important; /* Reset blend mode for text */
  background: none; /* Text container has no background */
}

.pc-details { /* Wrapper for name and title */
  width: 100%;
  position: absolute;
  top: 3em;
  display: flex;
  flex-direction: column;
  background: none; /* No background */
}

.pc-details h3 { /* Name */
  font-weight: 600;
  margin: 0;
  font-size: min(5svh, 3em);
  background: none;
  -webkit-text-fill-color: var(--text-color) !important; /* Ensure themed */
  color: var(--text-color) !important; /* Ensure themed */
  margin-bottom: 0.5em;
  transition: color 0.3s ease;
}

.pc-details p { /* Title */
  font-weight: 600;
  position: relative;
  top: -12px;
  white-space: nowrap;
  font-size: 16px;
  margin: 0 auto;
  width: min-content; /* Fit content */
  background: none;
  -webkit-text-fill-color: var(--text-color-muted) !important; /* Muted themed color */
  color: var(--text-color-muted) !important; /* Muted themed color */
  transition: color 0.3s ease;
}

/* Animations - keep as is, they don't rely on theme-specific colors */
@keyframes glow-bg {
  0% { --bgrotate: 0deg; }
  100% { --bgrotate: 360deg; }
}

@keyframes holo-bg {
  0% { background-position: 0 var(--background-y), 0 0, center; }
  100% { background-position: 0 var(--background-y), 90% 90%, center; }
}

/* Media queries - adjust sizes, should be fine with theming */
/* ... existing media queries ... */
@media (max-width: 768px) {
  .pc-card {
    height: 70svh;
    max-height: 450px;
  }

  .pc-details {
    top: 2em;
  }

  .pc-details h3 {
    font-size: min(4svh, 2.5em);
  }

  .pc-details p {
    font-size: 14px;
  }

  .pc-user-info {
    bottom: 15px;
    left: 15px;
    right: 15px;
    padding: 10px 12px;
  }

  .pc-mini-avatar {
    width: 28px;
    height: 28px;
  }

  .pc-user-details {
    gap: 10px;
  }

  .pc-handle {
    font-size: 13px;
  }

  .pc-status {
    font-size: 10px;
  }

  .pc-contact-btn {
    padding: 6px 12px;
    font-size: 11px;
  }
}

@media (max-width: 480px) {
  .pc-card {
    height: 60svh;
    max-height: 380px;
  }

  .pc-details {
    top: 1.5em;
  }

  .pc-details h3 {
    font-size: min(3.5svh, 2em);
  }

  .pc-details p {
    font-size: 12px;
    top: -8px;
  }

  .pc-user-info {
    bottom: 12px;
    left: 12px;
    right: 12px;
    padding: 8px 10px;
    border-radius: 50px;
  }

  .pc-mini-avatar {
    width: 24px;
    height: 24px;
  }

  .pc-user-details {
    gap: 8px;
  }

  .pc-handle {
    font-size: 12px;
  }

  .pc-status {
    font-size: 9px;
  }

  .pc-contact-btn {
    padding: 5px 10px;
    font-size: 10px;
    border-radius: 50px;
  }
}

@media (max-width: 320px) {
  .pc-card {
    height: 55svh;
    max-height: 320px;
  }

  .pc-details h3 {
    font-size: min(3svh, 1.5em);
  }

  .pc-details p {
    font-size: 11px;
  }

  .pc-user-info {
    padding: 6px 8px;
    border-radius: 50px;
  }

  .pc-mini-avatar {
    width: 20px;
    height: 20px;
  }

  .pc-user-details {
    gap: 6px;
  }

  .pc-handle {
    font-size: 11px;
  }

  .pc-status {
    font-size: 8px;
  }

  .pc-contact-btn {
    padding: 4px 8px;
    font-size: 9px;
    border-radius: 50px;
  }
} 